# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import streamlit as st
from joblib import load
import pandas as pd
import matplotlib.pyplot as plt
from nltk.tokenize import TweetTokenizer
from collections import Counter
from nltk.tokenize import word_tokenize
import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
from bs4 import BeautifulSoup 
import requests
import pandas as pd
from urllib.request import Request, urlopen
import re

df = pd.read_csv('/Users/ryles/Desktop/DataCamp/commentaires.csv')
 
best_logistic_regression_model = load('/Users/ryles/Desktop/DataCamp/saved_allocine.joblib') 
vectorizer = load('/Users/ryles/Desktop/DataCamp/saved_allocine_vect.joblib')

def preprocess_text(text):
    # Supprimer les balises HTML s'il y en a
    text = re.sub(r'<.*?>', '', text)
    
    # Supprimer la ponctuation et les chiffres
    text = re.sub(r'[^a-zA-Z√Ä-√ø]', ' ', text)
    
    # Mettre en minuscules
    text = text.lower()
    
    # Supprimer les mots vides en utilisant NLTK
    stop_words = set(stopwords.words("french"))
    words = text.split()
    filtered_words = [word for word in words if word not in stop_words]
    text = ' '.join(filtered_words)
    
    return text

# Cr√©ez une section pour le sommaire interactif
st.sidebar.title("Sommaire")

pages = ['Accueil', 'Contexte', 'Exploration et data viz', 'Utilisation de notre mod√®le', 'Difficult√©s rencontr√©es', 'Axes d"am√©lioriation']

page = st.sidebar.radio("Aller vers la page :" , pages)

if page == pages[0]:
    st.title("Bienvenue sur notre application web üë®‚Äçüíª")
    st.subheader("Sentiment Analysis project - Datacamp")
    st.markdown(" ‚¨ÖÔ∏è  Utilisez le menu √† gauche pour naviguer √† travers l'application")
    st.image('/Users/ryles/Desktop/DataCamp/efrei_paris.jpg')

elif page == pages[1]:
    # Titre de la page
    st.title("Sentiment analysis project")
    
    
    # Pr√©sentation du projet
    st.header("Contexte du Projet")
    st.write(
        "Bienvenue sur notre application web !"
        " Notre objectif est d'analyser et de comprendre les sentiments exprim√©s dans les commentaires et avis en ligne, "
        "en particulier sur la plateforme Allocin√© et sur le film tr√®s connu Intouchable. "
        "Notre objectif est fournir une solution qui permet de pouvoir classifier automatiquement des commentaires selon le sentiment. "
    )
    
    # Objectifs du projet
    st.header("Objectifs du Projet")
    st.write(
        "Notre projet a pour but de d√©velopper un mod√®le d'analyse de sentiment qui peut classer les commentaires en positifs "
        "ou n√©gatifs en se basant sur le langage naturel. \n"
        "\n"
        "Nous avons donc mis en place une interface utilisateur intuitive o√π les utilisateurs peuvent saisir des commentaires et obtenir instantan√©ment des pr√©dictions de sentiment. Cela peut √™tre utile dans le contexte de la surveillance des m√©dias sociaux ou des commentaires de produits. \n"
    )
    
    # M√©thodologie
    st.header("M√©thodologie üßë‚Äçüíª")
    st.write(
        "Pour mener √† bien ce projet, il a fallu scrapper les commentaires et avis en question. Plusieurs outils ont √©t√© test√©s, mais notre choix s'est port√© sur BeautifulSoup. "
        "Nous avons collect√© plus de 7200 commentaires en utilisant cet outil. \n "
        "Cependant, d√ª au succ√®s de ce film, le nombre de commentaire n√©gatifs compar√© au nombre de commentaires positifs n'√©taient pas √©quilibr√©s. Nous avons donc r√©duits notre base de commentaires a 1398, arrivant ainsi a 46% de commentaires n√©gatifs et 54% de commentaires positifs. \n"
        "\n"
        "Si vous souhaitez consulter avoir une vision de la page que nous avons scrapp√©s ou voir les commentaires que nous avons collect√©s, vous pouvez les trouver via ce lien : https://www.allocine.fr/film/fichefilm-182745/critiques/spectateurs/ \n"
        "\n"
        "Un autre outil que nous avons utilis√© est streamlit, c'est l'outil gr√¢ce auquel vous pouvez utiliser cette application. Streamlit est un framework open source Python qui permet de cr√©er des applications web interactives de mani√®re simple et rapide. Il est largement utilis√© pour d√©velopper des tableaux de bord, des outils de visualisation de donn√©es et des interfaces utilisateur conviviales en tirant parti de la puissance de Python. Streamlit rend la cr√©ation d'applications web accessible √† tous les niveaux de comp√©tence en programmation, offrant une interface intuitive pour concevoir des applications efficaces et attrayantes. \n"
        "\n"
        "Nous avons donc eu l'id√©e de creer cet application qui permet √† un utilisateur de pouvoir rentrer un commentaire √† la main et d'dobtenir le sentiment. Ou bien de pouvoir rentrer un fichier CSV  de commentaires et de pouvoir voir le nombre de commentaires negatifs et positifs. Comme dis plus haut cela peut √™tre dans la surveillance des r√©seaux sociaux par exemple. \n"
        "\n"
        "Concernant le mod√®le utilis√©, plusieurs ont √©t√© test√©s plus ou moins compl√®xes, notre choix s'est port√© sur la regression logistique, sur laquelle on obtenait les meilleurs scores \n"
        "\n"
        "Ensuite, nous avons pr√©trait√© les donn√©es collect√©es et entra√Æn√© le mod√®le en utilisant ces donn√©es, en optimisant "
        "les hyperparam√®tres pour obtenir les meilleures performances."
        "On arrive donc √† une pr√©cision de 0.90 ce qui est plut√¥t bon. \n "
        "\n"
        "Pour mener √† bien ce projet, nous avons adopt√© une approche de d√©veloppement agile tout au long de ce projet, ce qui nous a permis de b√©n√©ficier de plusieurs avantages cl√©s. En travaillant de mani√®re it√©rative et incr√©mentielle, nous avons pu nous adapter aux changements et aux retours d'exp√©rience en cours de route, garantissant ainsi que notre application r√©pondait toujours aux besoins changeants. De plus, l'agilit√© nous a permis de maintenir une communication ouverte et constante au sein de l'√©quipe, favorisant la collaboration et la r√©solution rapide des probl√®mes. En fin de compte, cette m√©thodologie a contribu√© √† la r√©ussite de notre projet en nous permettant de livrer une application de haute qualit√©, en respectant les d√©lais et en maintenant une grande flexibilit√©."
    )
    
    # Collaborateurs
    st.header("Collaborateurs üë´")
    st.write(
        "Ce projet a √©t√© r√©alis√© par une √©quipe de cinq membres : "
        "Ryles /"
        "Nabil /"
        "Kenza /"
        "Louis /"
        "Alexandre \n"
        "\n"
        "Chacune des personnes s'est vu attribu√© une tache, mais grace √† nos r√©unions r√©guli√®re, nous √©tions au courant des difficult√©es de chacun donc l'entraide √©tait naturelle."
    )
    
    # Contact
    st.header("Contact ‚úâÔ∏è")
    st.write(
        "Pour toute question ou commentaire, n'h√©sitez pas √† nous contacter aux adresses e-mails suivante : \n"
            "ryles.ait-ahmed@efrei.net \n"
            "\n"
            "alexandre.bodin@efrei.net \n"
            "\n"
            "nabil.bettaieb@efrei.net \n"
            "\n"
            "kenza.baffoun@efrei.net \n"
            "\n"
            "louis.bruder@efrei.net \n"
            "\n"
    )

elif page == pages[2]:

    st.title("Consultation des Commentaires et Data Viz")
    
    # Afficher les premi√®res lignes du dataframe
    st.header("Premi√®res lignes du dataframe de commentaires")
    st.dataframe(df.head())
    
    # Afficher des statistiques de base sur le dataframe
    st.header("Statistiques de base")
    st.write("Nombre total de commentaires :", len(df))
    st.write("Nombre de commentaires positifs :", len(df[df['Sentiment'] == 'Positif']))
    st.write("Nombre de commentaires n√©gatifs :", len(df[df['Sentiment'] == 'Negatif']))
    
    sentiment_counts = df['Sentiment'].value_counts(normalize=True) * 100

    # Cr√©ez un camembert en utilisant matplotlib
    fig, ax = plt.subplots(figsize = (5,5))
    ax.pie(sentiment_counts, labels=['Negatif', 'Positif'], autopct='%1.1f%%', startangle=140)
    ax.set_title('R√©partition des sentiments')
    
    # Affichez le camembert dans l'application Streamlit
    st.pyplot(fig)
    
    show_duplicates = st.checkbox("Afficher les commentaires en doublons", value=False)

    if show_duplicates:
    # S√©lectionner les commentaires en doublons
        duplicate_comments = df[df.duplicated(subset=['Commentaire'])]
    
    # Afficher les commentaires en doublons
        st.subheader("Commentaires en doublons :")
        st.dataframe(duplicate_comments['Commentaire'])
    else: 
        st.info("Cochez la case ci-dessus pour afficher les commentaires en doublons.")
        
 


   
elif page == pages[3]:
    st.header("Pr√©diction de Sentiment")
    user_input = st.text_input("Saisissez un commentaire :")
    
    # Ajouter la possibilit√© de t√©l√©charger un fichier CSV
    uploaded_file = st.file_uploader("T√©l√©charger un fichier CSV de commentaires", type=["csv"])
    
    if user_input or uploaded_file:
        # Pr√©traiter le commentaire de l'utilisateur
        if user_input:
            user_input_processed = preprocess_text(user_input)
            
        # Bouton pour pr√©dire le sentiment
        if st.button("Pr√©dire le sentiment"):
            if user_input:
                # Vectoriser le commentaire de l'utilisateur
                user_input_vectorized = vectorizer.transform([user_input_processed])
                
                # Faites la pr√©diction en utilisant le mod√®le
                prediction = best_logistic_regression_model.predict(user_input_vectorized)
                
                # Afficher le r√©sultat
                if prediction[0] == 1:
                    st.success("Sentiment : Positif")
                else:
                    st.error("Sentiment : N√©gatif")
            
            if uploaded_file:
                # V√©rifier si le fichier a la bonne extension et si la colonne s'appelle "Commentaire"
                if uploaded_file.type == "text/csv":
                    uploaded_df = pd.read_csv(uploaded_file)
                    if 'Commentaire' in uploaded_df.columns:
                        # Pr√©traiter les commentaires du fichier CSV
                        uploaded_df['Commentaire'] = uploaded_df['Commentaire'].apply(preprocess_text)
                        
                        # Vectoriser les commentaires
                        uploaded_comments_vectorized = vectorizer.transform(uploaded_df['Commentaire'])
                        
                        # Faites les pr√©dictions en utilisant le mod√®le
                        predictions = best_logistic_regression_model.predict(uploaded_comments_vectorized)
                        num_positives = (predictions == 1).sum()
                        num_negatives = (predictions == 0).sum()
            
                        st.write("Nombre de commentaires positifs : ", num_positives)
                        st.write("Nombre de commentaires n√©gatifs : ", num_negatives)
                        
                        # Afficher la r√©partition des pr√©dictions
                        sentiment_distribution = pd.Series(predictions).value_counts()
                        
                        fig, ax = plt.subplots(figsize=(6, 6))
                        ax.pie(sentiment_distribution, labels=['N√©gatif', 'Positif'], autopct='%1.1f%%', startangle=140)
                        ax.set_title('R√©partition des sentiments')
            
                        # Affichez le camembert dans l'application Streamlit
                        st.pyplot(fig)
                    else:
                        st.error("Le fichier CSV doit contenir une colonne nomm√©e 'Commentaire'.")
                else:
                    st.error("Le fichier doit √™tre au format CSV.")
    st.subheader("Conditions pour t√©l√©verser un fichier CSV :")
    st.info("Le fichier CSV doit contenir une colonne nomm√©e 'Commentaire' pour √™tre pris en charge. Assurez-vous que le fichier est au format CSV.")
    
    
elif page == pages[4]:
    
    st.title("Difficult√©s Rencontr√©es")

    st.header("Le Scrapping")
    st.write(
        "L'une des premi√®res difficult√©s que nous avons rencontr√©es concernait le scrapping des commentaires. Initialement, "
        "notre projet visait √† effectuer une analyse de sentiment sur le film 'Le Parrain' en utilisant des commentaires provenant du site IMDb. "
        "\n"
        "\n Cependant, IMDb a mis en place un bouton dynamique pour charger les commentaires,  "
        "ce qui a compliqu√© le processus de scrapping. Je mets le lien ici pour les curieux : https://www.imdb.com/title/tt0068646/reviews?ref_=tt_urv. \n" 
        "\n"
        "Cette difficult√© nous a amen√©s √† r√©orienter notre projet vers le site Allocin√©."
    )

    st.header("Utilisation de Streamlit")
    st.write(
        "Une autre difficult√© que nous avons rencontr√©e √©tait li√©e √† notre utilisation de Streamlit pour d√©velopper l'interface "
        "de notre application web. Il s'agissait de notre premi√®re exp√©rience avec cet outil, ce qui a demand√© un apprentissage initial. "
        "Heureusement, la documentation compl√®te et les ressources disponibles nous ont permis de surmonter cette difficult√©. "
        "Au fur et √† mesure, nous avons r√©ussi √† ma√Ætriser les fonctionnalit√©s de Streamlit pour cr√©er une interface utilisateur conviviale."
    )

    st.header("D√©ploiement sur le Cloud")
    st.write(
        "Le dernier d√©fi que nous avons relev√© √©tait le d√©ploiement de notre mod√®le sur le cloud. Il s'agissait √©galement de notre premi√®re exp√©rience "
        "avec le d√©ploiement de mod√®les de machine learning. Cette √©tape a n√©cessit√© une compr√©hension approfondie des services cloud et des solutions de d√©ploiement. "
        "Apr√®s des efforts de recherche et d'exp√©rimentation, nous avons r√©ussi √† h√©berger notre application web et √† mettre en ligne notre mod√®le. Cela a √©t√© une exp√©rience √©ducative pr√©cieuse pour toute l'√©quipe."
    )

    

elif page == pages[5]:
    
    st.title("Axes d'Am√©lioration")

    st.header("Am√©lioration de la Collecte de Donn√©es")
    st.write(
        "Pour am√©liorer notre mod√®le, nous pourrions envisager de collecter davantage de donn√©es de commentaires. "
        "Un ensemble de donn√©es plus vaste et diversifi√© pourrait permettre au mod√®le de g√©n√©raliser plus efficacement."
    )

    st.header("Ing√©nierie de Caract√©ristiques")
    st.write(
        "L'ing√©nierie de caract√©ristiques est une √©tape cruciale dans la cr√©ation d'un mod√®le performant. "
        "Nous pourrions explorer des techniques d'extraction de caract√©ristiques plus avanc√©es pour mieux repr√©senter le texte des commentaires."
    )

    st.header("Gestion de la Neutralit√©")
    st.write(
        "Actuellement, notre mod√®le classe les commentaires en deux cat√©gories : positifs et n√©gatifs. "
        "Il pourrait √™tre int√©ressant d'ajouter une cat√©gorie de neutralit√© pour les commentaires qui ne sont ni positifs ni n√©gatifs."
    )

    st.header("Optimisation des Hyperparam√®tres")
    st.write(
        "Nous pourrions continuer √† optimiser les hyperparam√®tres de notre mod√®le pour am√©liorer ses performances. "
        "Cela pourrait inclure des ajustements plus fins des param√®tres du mod√®le."
    )
    
    st.header("Am√©liorations de l'Application web")
    st.write(
        "Pour rendre notre application plus conviviale et efficace, nous pourrions envisager les am√©liorations suivantes :"
    )
    st.write("- Ajouter une fonction de recherche pour trouver des commentaires sp√©cifiques.")
    st.write("- Proposer des graphiques interactifs pour une meilleure visualisation des donn√©es.")
    st.write("- Permettre aux utilisateurs de charger des commentaires √† partir d'autres sources.")
    st.write("- Ajouter une fonction de r√©sum√© automatique des commentaires.")
    
    
    
    













